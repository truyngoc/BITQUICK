
// =============================================
// This Class is generated by BuildProject
// Author:	Bop
// Create date:	14/08/2016 23:47
// Description:	
// Revise History:	
// =============================================

using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.Sql;
using System.Linq;
using System.Collections.Generic;
using BIT.Objects;
using BIT.Common;
using BIT.DataHelper;
using Microsoft.Practices.EnterpriseLibrary.Data;

namespace BIT.DataHelper
{ 
	public class MEMBERS_DH : DataAccessBase
	{
        public void InsertItem(MEMBERS obj)
        {            
            defaultDB.ExecuteNonQuery("sp_MEMBERS_Insert"
                , obj.Username, obj.Password, obj.Password_PIN, obj.CodeId_Sponsor, obj.Fullname, obj.Phone, obj.Email, obj.Wallet, obj.CreateDate, obj.Country, obj.UpLine, obj.Status);
        }

        public void UpdateItem(MEMBERS obj)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_Update"
                , obj.CodeId, obj.Fullname, obj.Phone, obj.Wallet);
        }
        //UpdateLevelAndStatus - quynhld
        public void UpdateLevelAndStatus(MEMBERS obj)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_UpdateLevelAndStatus"
                , obj.CodeId, obj.Fullname, obj.Phone, obj.Wallet,obj.Level,obj.Status);
        }
        public void DeleteItem(int ID)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_Delete"
                , ID);
        }

        public MEMBERS SelectItem(int ID)
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_SelectItem"
                , ID).FirstOrDefault();
        }

        //quynhld select by codeID
        public MEMBERS SelectItem(String CodeID)
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_SelectItem_byCodeID"
                , CodeID).FirstOrDefault();
        }

        public IEnumerable<MEMBERS> SelectAllItems()
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_SelectAllItems");
        }

        public bool IsExistsItem(string user_name)
        {
            IDataReader dr = defaultDB.ExecuteReader("sp_MEMBERS_SelectItemByUserName"
                , user_name);

            bool bol = dr.Read();
            dr.Close();

            return bol;
        }

        public MEMBERS SelectItemByUserName(string user_name)
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_SelectItemByUserName"
                , user_name).FirstOrDefault();
        }

        public MEMBERS SelectItemByUserPass(string user_name, string pwd)
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_GetByUserPass"
                , user_name, pwd).FirstOrDefault();
        }

        public IEnumerable<MEMBERS> SelectUplineOfUserCreate(string codeid)
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_SelectUplineOfUserCreate"
                , codeid
                );
        }

        public List<object> GetChartData(string user_name)
        {
            IDataReader dr = defaultDB.ExecuteReader("sp_MEMBERS_Tree"
                , user_name);

            List<object> chartData = new List<object>();
            while (dr.Read())
            {
                chartData.Add(new object[] { dr["ID"], dr["Username"], dr["CodeId"], dr["CodeId_Sponsor"], dr["UpLine"], dr["Branch"], dr["Status"], dr["Level"], dr["Fullname"] });
            }

            return chartData;
        }

        public bool CheckOldPassword(string CodeId, string oldPassword)
        {
            IDataReader dr = defaultDB.ExecuteReader("sp_MEMBERS_CheckOldPassword"
                , CodeId, oldPassword);

            bool bol = dr.Read();
            dr.Close();

            return bol;
        }

        public void ChangePassword(string CodeId, string newPassword)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_ChangePassword"
                , CodeId, newPassword);
        }

        public bool CheckOldPasswordPIN(string CodeId, string oldPasswordPIN)
        {
            IDataReader dr = defaultDB.ExecuteReader("sp_MEMBERS_CheckOldPasswordPIN"
                , CodeId, oldPasswordPIN);

            bool bol = dr.Read();
            dr.Close();

            return bol;
        }
        public void ChangePasswordPIN(string CodeId, string newPasswordPIN)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_ChangePasswordPIN"
                , CodeId, newPasswordPIN);
        }

        public int getNumberOfDownlineActive(string CodeId)
        {
           return Convert.ToInt32( defaultDB.ExecuteScalar("sp_MEMBERS_getNumberOfDownlineActive"
                , CodeId));
        }


        public IEnumerable<MEMBERS> getAllMemberForCalculateCommisionMonthly()
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_getAllMemberForCalculateCommisionMonthly"
                );
        }

        public DASHBOARD getInfoDashBoard(string CodeId)
        {
            return defaultDB.ExecuteSprocAccessor<DASHBOARD>("sp_MEMBERS_getInfoDashBoard"
                , CodeId).FirstOrDefault();
        }

        public bool IsExecutionPHSuccess(string CodeId)
        {
            var iCountPHok = defaultDB.ExecuteScalar("sp_MEMBERS_IsExecutionPHSuccess"
                , CodeId);
            
            if (Convert.ToInt32(iCountPHok) > 0)
                return true;
            else
                return false;

        }

        public IEnumerable<MEMBERS> SearchItemByUserName(string user_name)
        {
            return defaultDB.ExecuteSprocAccessor<MEMBERS>("sp_MEMBERS_SearchItemByUserName"
                , user_name);
        }

        public void LockAccount(int ID)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_Lock"
                , ID);
        }

        //quynhld lock member by CodeID
        public void LockAccount(string CodeID)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_Lock_byCodeID"
                , CodeID);
        }

        public void UnLockAccount(int ID)
        {
            defaultDB.ExecuteNonQuery("sp_MEMBERS_UnLock"
                , ID);
        }
	}
}
