
// =============================================
// This Class is generated by BuildProject
// Author:	Bop
// Create date:	07/09/2016 20:08
// Description:	
// Revise History:	
// =============================================

using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Data.Sql;
using System.Transactions;
using System.Linq;
using System.Collections.Generic;
using BIT.Objects;
using BIT.Common;
using BIT.DataHelper;
using Microsoft.Practices.EnterpriseLibrary.Data;


namespace BIT.DataHelper
{ 
	public class COMMAND_DH : DataAccessBase
	{
        public int InsertWithTrans(DbTransaction trans, COMMAND obj)
        {
            var iRet = defaultDB.ExecuteScalar(trans, "sp_COMMAND_InsertReturnId"
                , obj.CommandCode, obj.UserCreate, obj.DateCreate);

            return Convert.ToInt32(iRet);
        }

		public void InsertItem(COMMAND obj)
		{
			defaultDB.ExecuteNonQuery("sp_COMMAND_Insert"
				, obj.CommandCode, obj.UserCreate, obj.DateCreate);
		}

		public void UpdateItem(COMMAND obj)
		{
			defaultDB.ExecuteNonQuery("sp_COMMAND_Update"
				, obj.ID, obj.CommandCode, obj.UserCreate, obj.DateCreate);
		}

		public void DeleteItem(int ID)
		{
			defaultDB.ExecuteNonQuery("sp_COMMAND_Delete"
				, ID);
		}

		public COMMAND SelectItem(int ID)
		{
			return defaultDB.ExecuteSprocAccessor<COMMAND>("sp_COMMAND_SelectItem"
				, ID).FirstOrDefault();
		}

		public IEnumerable<COMMAND> SelectAllItems()
		{
			return defaultDB.ExecuteSprocAccessor<COMMAND>("sp_COMMAND_SelectAllItems");
		}

		public bool IsExistsItem(int ID)
		{
			IDataReader dr  = defaultDB.ExecuteReader("sp_COMMAND_SelectItem"
				, ID);
			
			bool bol = dr.Read();
			dr.Close();
			
			return bol;
		}


        public void InsertWithTransaction(COMMAND _command, List<COMMAND_DETAIL> _lstCommandDetails)
        {
            using (TransactionScope scope = new TransactionScope(TransactionScopeOption.Suppress))
            {
                using (DbConnection connection = defaultDB.CreateConnection())
                {
                    connection.Open();
                    try
                    {
                        using (DbTransaction transaction = connection.BeginTransaction())
                        {
                            try
                            {
                                var dhCommand = new COMMAND_DETAIL_DH();
                                int commandId = InsertWithTrans(transaction, _command);

                                // insert command details
                                foreach (var o in _lstCommandDetails)
                                {
                                    o.CommandID = commandId;

                                    dhCommand.InsertItemWithTrans(transaction, o);

                                }

                                transaction.Commit();
                            }
                            catch (Exception ex)
                            {
                                transaction.Rollback();
                                throw ex;
                            }
                        }
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
                scope.Complete();
            } 
        }
	}
}
